patent-tools
============

These tools are not general purpose.  The tools extract cooperative patent classification codes, section/scheme/class/group, and use the encoded information to build relationship weights between different classifications.  Ultimately, the information and scoring will feed into a larget system of practical tools that allow for easier identification of expert witnesses and other resources useful for patent litigation.

scrape-uspto
++++++++++++

Extracts USPTO website data.

* scrape-uspto-requirements.txt -- job description per oDesk posting.
* scrape-uspto-requirements-att.xls -- attachment to job description.
* scrape-uspto.py -- one-shot utility to scrape uspto web site for patent data according to scrape-uspto-requirements.txt.  outfile = uspto.out.
  * requires module BeautifulSoup to be installed (e.g., sudo pip install BeautifulSoup).
  * no error checking; dead links throw error without continuing to next link.
* scrape-uspto.input -- required plain-text input file for scrape-uspto.py; one number per line.
* execute: python scrape-uspto.py (Python3 was used)
* scrape-uspto-ouput.zip -- scraped data (as of 2013/03/31).

score-uspto
+++++++++++

Scores each group within a single section according to its subject relevance to each other group.

* score-uspto.cpp -- scoring algorithm.  requires C++11 due to use of unsorted_map. if C++11 is not supported, the unsorted_map could be converted to a traditional map or the external library TR1 could be used.
  * compile:
    > g++ -std=c++11 score-uspto.cpp -o score
* score-uspto-requirements.txt -- job description per oDesk posting.
* score-uspto-requirements.pdf -- attachment to job description. originally called "Workflow."
* score-uspto-tests -- directory contains test cases in the form of test.input and test.expected. test.results are the last results.
  * execute and make sure there are no differences
    > score test.input test.results > test.log
    > diff test.results test.expected
* score-uspto-input -- scraped data already divided into sections.
  * format: id,cpc,level. no header row.
  * cpc: Xsssc[*]/gg[*], where X = section, sss = scheme, c[*] = class, gg[*] = group
  * execute and monitor example:
    > score score-uspto-input/A.input A.csv > A.log &
    > tail -f A.log
* input, results, and logs (as of 2013/04/07) at https://dl.dropbox.com/u/10329615/uspto-scores.zip
* score-uspto-logs -- all logs from 2013/04/07 run
